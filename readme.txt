// FÃ¼r spÃ¤ter

# Wissens-Assistent

Ein interaktiver Assistent zur Indexierung und Abfrage von Wissen aus verschiedenen Quellen wie Confluence, PDF-Dokumenten und Miro-Boards.

## Projektstruktur

```
ðŸ“‚ projekt-root/
â”‚â”€â”€ ðŸ“‚ src/                # Hauptcode des Projekts
â”‚   â”‚â”€â”€ ðŸ“‚ api/            # API-Handler fÃ¼r verschiedene Datenquellen
â”‚   â”‚   â”‚â”€â”€ confluence.py  # Funktionen zur Confluence-Datenextraktion
â”‚   â”‚   â”‚â”€â”€ miro.py        # Funktionen zur Miro-Datenextraktion
â”‚   â”‚   â”‚â”€â”€ pdf.py         # Funktionen zur Verarbeitung von PDFs
â”‚   â”‚â”€â”€ ðŸ“‚ database/       # Datenbankschnittstellen
â”‚   â”‚   â”‚â”€â”€ vectorstore.py # ChromaDB-Verwaltung
â”‚   â”‚â”€â”€ ðŸ“‚ ui/             # Streamlit UI-Module
â”‚   â”‚   â”‚â”€â”€ chat.py        # Chatbot-Interface
â”‚   â”‚   â”‚â”€â”€ upload.py      # Datei-Upload-UI
â”‚   â”‚â”€â”€ ðŸ“‚ core/           # Kernfunktionen & Logik
â”‚   â”‚   â”‚â”€â”€ embeddings.py  # OpenAI Embeddings-Verwaltung
â”‚   â”‚   â”‚â”€â”€ retrieval.py   # Retrieval-Mechanismus fÃ¼r Abfragen
â”‚â”€â”€ ðŸ“‚ config/             # Konfigurationsdateien
â”‚   â”‚â”€â”€ settings.py        # API-Keys & allgemeine Konfigs
â”‚â”€â”€ app.py                 # Haupt-Streamlit-Anwendung
â”‚â”€â”€ requirements.txt       # AbhÃ¤ngigkeiten
â”‚â”€â”€ README.md              # Projektdokumentation
```

## Installation

1. Repository klonen:
```
git clone <repository-url>
cd wissens-assistent
```

2. AbhÃ¤ngigkeiten installieren:
```
pip install -r requirements.txt
```

3. API-Keys konfigurieren:
Bearbeite die Datei `config/settings.py` und setze die erforderlichen API-Keys.

## Verwendung

1. Starte die Anwendung:
```
streamlit run app.py aktuell nur Ã¼ber venv mit folgendem Befehl: venv\Scripts\activate

```

2. Ã–ffne die Anwendung im Browser (normalerweise unter http://localhost:8501).

3. WÃ¤hle die gewÃ¼nschten Datenquellen aus und klicke auf "Dokumente verarbeiten".

4. Stelle Fragen an die Wissensbasis Ã¼ber das Chat-Interface.

## Funktionen

- Integration mit Confluence zur Extraktion von Wiki-Inhalten
- Verarbeitung von PDF-Dokumenten
- Integration mit Miro-Boards zur Extraktion von Inhalten
- Vektorbasierte Suche mit ChromaDB
- Conversational AI mit OpenAI

## Fehlerbehebung

- Bei Problemen mit der Verbindung zu externen APIs Ã¼berprÃ¼fe die Konfiguration in `config/settings.py`.
- Stelle sicher, dass die erforderlichen API-Keys gÃ¼ltig sind.
- Bei Fehlern in der Anwendung werden diese in der Streamlit-OberflÃ¤che angezeigt.